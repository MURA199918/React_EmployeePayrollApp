[{"C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\index.js":"1","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\App.js":"2","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\reportWebVitals.js":"3","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\components\\payrollform\\PayrollForm.jsx":"4","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\services\\EmployeeService.js":"5","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\config\\config.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":413,"mtime":1611647245840,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":8971,"mtime":1611648159266,"results":"11","hashOfConfig":"8"},{"size":355,"mtime":1611648076487,"results":"12","hashOfConfig":"8"},{"size":82,"mtime":1611648124272,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"9y2xz9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\index.js",[],["29","30"],"C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\App.js",["31"],"import logo from './logo.svg';\nimport './App.css';\nimport PayrollForm from './components/payrollform/PayrollForm';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route>\n            <PayrollForm/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\reportWebVitals.js",[],"C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\components\\payrollform\\PayrollForm.jsx",["32","33"],"import profile1 from \"../../assets/Ellipse -3.png\";\r\nimport profile2 from \"../../assets/Ellipse -8.png\";\r\nimport profile3 from \"../../assets/Ellipse -1.png\";\r\nimport profile4 from \"../../assets/Ellipse -7.png\";\r\nimport logo from \"../../assets/logo.png\";\r\nimport '../payrollform/PayrollFrom.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useState } from \"react\";\r\nimport EmployeeService from '../../services/EmployeeService';\r\n\r\nconst service = new EmployeeService();\r\n\r\nconst PayrollForm = (props) => {\r\n\r\n  let inititalValue = {\r\n    name: '',\r\n    profileArray: [\r\n      { url: profile1},\r\n      { url: profile2},\r\n      { url: profile3},\r\n      { url: profile4},\r\n    ],\r\n    allDepartment: [\r\n      'HR', 'Sales', 'Finance', 'Engineer', 'Others'\r\n    ],\r\n    departmentValue: [],\r\n    gender: '',\r\n    salary: '',\r\n    day: '1',\r\n    month: 'Jan',\r\n    year: '2020',\r\n    startDate: '',\r\n    notes: '',\r\n    id: '',\r\n    profileUrl: '',\r\n    isUpdate: false,\r\n    error: {\r\n      department: '',\r\n      name: '',\r\n      gender: '',\r\n      salary: '',\r\n      profileUrl: '',\r\n      startDate: ''\r\n    }\r\n  }\r\n  const [formValue, setForm] = useState(inititalValue);\r\n\r\n  const changeValue = (event) => {\r\n    setForm({...formValue, [event.target.name]: event.target.value})\r\n  }\r\n\r\n  const onCheckChange = (name) => {\r\n    let index = formValue.departmentValue.indexOf(name);\r\n    let checkArray = [...formValue.departmentValue]\r\n    if (index > -1)\r\n      checkArray.splice(index, 1)\r\n    else  \r\n      checkArray.push(name);\r\n    setForm({...formValue, departmentValue: checkArray}); \r\n  }\r\n\r\n  const getChecked = (name) => {\r\n    return formValue.departmentValue && formValue.departmentValue.includes(name);\r\n  }\r\n\r\n  const validData = async () => {\r\n    let isError = false;\r\n    let error = {\r\n      department: '',\r\n      name: '',\r\n      gender: '',\r\n      salary: '',\r\n      profileUrl: '',\r\n      startDate: ''\r\n    }\r\n    if (formValue.name.length < 1) {\r\n      error.name = 'name is required field'\r\n      isError = true;\r\n    }\r\n    if (formValue.gender.length < 1) {\r\n      error.gender = 'gender is required field'\r\n      isError = true;\r\n    }\r\n    if (formValue.salary.length < 1) {\r\n      error.salary = 'salary is required field'\r\n      isError = true;\r\n    }\r\n    if (formValue.profileUrl.length < 1) {\r\n      error.profileUrl = 'profileUrl is required field'\r\n      isError = true;\r\n    }\r\n    if (formValue.department.length < 1) {\r\n      error.department = 'department is required field'\r\n      isError = true;\r\n    }\r\n    await setForm({...formValue, error: error})\r\n    return isError;\r\n  }\r\n\r\n  const save = async (event) => {\r\n    event.preventDefault();\r\n    let object = {\r\n      name: formValue.name,\r\n      salary: formValue.salary,\r\n      gender: formValue.gender,\r\n      startDate: formValue.day + \" \" + formValue.month + \" \" + formValue.year,\r\n      note: formValue.notes,\r\n      profilePic: formValue.profileUrl,\r\n      departments: formValue.departmentValue\r\n    }\r\n\r\n    service.employeeRegistration(object).then(data => {\r\n      console.log(data);\r\n    }).catch(err => {\r\n      console.log(err);\r\n    })\r\n    console.log(this.state);\r\n  }\r\n\r\n  const reset = () => {\r\n    setForm({...inititalValue, id: formValue.id, isUpdate: formValue.isUpdate});\r\n  }\r\n\r\n  return (\r\n    <div className=\"payroll-main\">\r\n      <header className=\"header-content header\">\r\n        <div className=\"logo-content\">\r\n          <img src={logo} alt=\"\" />\r\n          <div>\r\n            <span className=\"emp-text\">EMPLOYEE</span><br />\r\n            <span className=\"emp-text emp-payroll\"> PAYROLL</span>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <div className=\"form-content\">\r\n        <form className=\"form\" action=\"#\" onSubmit>\r\n          <div className=\"form-head\">Employee Payroll</div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"name\">Name</label>\r\n            <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name...\" />\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.name} </div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"profileUrl\">Profile Image</label>\r\n            <div className=\"profile-radio-content\">\r\n              <label>\r\n                <input type=\"radio\" checked={formValue.profileUrl==='../assets/Ellipse -3.png'} name=\"profileUrl\"\r\n                  value=\"../assets/Ellipse -3.png\" onChange={changeValue} />\r\n                <img className=\"profile\" src={profile1} alt=\"\"/>\r\n              </label>\r\n              <label>\r\n                <input type=\"radio\" checked={formValue.profileUrl==='../assets/Ellipse -1.png'} name=\"profileUrl\"\r\n                  value=\"../assets/Ellipse -1.png\" onChange={changeValue} />\r\n                <img className=\"profile\" src={profile2} alt=\"\"/>\r\n              </label>\r\n              <label>\r\n                <input type=\"radio\" checked={formValue.profileUrl==='../assets/Ellipse -8.png'} name=\"profileUrl\"\r\n                  value=\"../assets/Ellipse -8.png\" onChange={changeValue} />\r\n                <img className=\"profile\" src={profile3} alt=\"\"/>\r\n              </label>\r\n              <label>\r\n                <input type=\"radio\" checked={formValue.profileUrl==='../assets/Ellipse -7.png'} name=\"profileUrl\"\r\n                  value=\"../assets/Ellipse -7.png\" onChange={changeValue} />\r\n                <img className=\"profile\" src={profile4} alt=\"\"/>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.profileUrl} </div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"gender\">Gender</label>\r\n            <div>\r\n              <input type=\"radio\" id=\"male\" onChange={changeValue} name=\"gender\" value=\"male\" />\r\n              <label className=\"text\" htmlFor=\"male\">Male</label>\r\n              <input type=\"radio\" id=\"female\" onChange={changeValue} name=\"gender\" value=\"female\" />\r\n              <label className=\"text\" htmlFor=\"female\">Female</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.gender} </div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"department\">Department</label>\r\n            <div>\r\n              {formValue.allDepartment.map(item => (\r\n                <span key={item}>\r\n                  <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\r\n                    defaultChecked={() => getChecked(item)} value={item} />\r\n                  <label className=\"text\" htmlFor={item}>{item}</label>\r\n                </span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.department} </div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"salary\">Salary</label>\r\n            <input className=\"input\" type=\"number\" onChange={changeValue} id=\"salary\" value={formValue.salary} name=\"salary\" placeholder=\"Salary\" />\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.salary} </div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\r\n            <div>\r\n              <select onChange={changeValue} id=\"day\" name=\"day\"> \r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>  \r\n              </select>\r\n              <select onChange={changeValue} id=\"month\" name=\"month\"> \r\n                <option value=\"Jan\">January</option>\r\n                <option value=\"Feb\">Febraury</option>  \r\n              </select>\r\n              <select onChange={changeValue} id=\"year\" name=\"year\"> \r\n                <option value=\"2021\">2021</option>\r\n                <option value=\"2020\">2020</option>  \r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.startDate} </div>\r\n          <div className=\"row-content\">\r\n            <label className=\"label text\" htmlFor=\"notes\">Notes</label>\r\n            <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\"\r\n               style={{height: '100%' }}></textarea>\r\n          </div>\r\n\r\n          <div className=\"button-content\">\r\n            <a routerLink=\"\" className=\"resetButton button cancelButton\">Cancel</a>\r\n            <div className=\"submit-reset\">\r\n              <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\" onSubmit={save}>{formValue.isUpdate ? 'Update' : 'Submit'} </button>\r\n              <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default withRouter(PayrollForm);","C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\services\\EmployeeService.js",[],"C:\\ReactWorkSpace\\EmployeePayroll\\employeepayrollapp\\src\\config\\config.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":66,"column":9,"nodeType":"40","messageId":"41","endLine":66,"endColumn":18},{"ruleId":"43","severity":1,"message":"44","line":222,"column":13,"nodeType":"45","endLine":222,"endColumn":74},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'validData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]